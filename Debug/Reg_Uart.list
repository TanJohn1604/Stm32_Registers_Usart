
Reg_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004bc  080004bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004d4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000788  00000000  00000000  000104fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002db  00000000  00000000  00010c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fdcf  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b38  00000000  00000000  00020e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053343  00000000  00000000  0002196f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00074cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000168  00000000  00000000  00074d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004a4 	.word	0x080004a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004a4 	.word	0x080004a4

08000170 <config>:
 *  Created on: Mar 10, 2022
 *      Author: ad
 */
#include "config.h"

void config(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000174:	4b29      	ldr	r3, [pc, #164]	; (800021c <config+0xac>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a28      	ldr	r2, [pc, #160]	; (800021c <config+0xac>)
 800017a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800017e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY) );
 8000180:	bf00      	nop
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <config+0xac>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <config+0x12>
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 800018e:	4b23      	ldr	r3, [pc, #140]	; (800021c <config+0xac>)
 8000190:	685b      	ldr	r3, [r3, #4]
 8000192:	4a22      	ldr	r2, [pc, #136]	; (800021c <config+0xac>)
 8000194:	f043 0301 	orr.w	r3, r3, #1
 8000198:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_HSE));
 800019a:	bf00      	nop
 800019c:	4b1f      	ldr	r3, [pc, #124]	; (800021c <config+0xac>)
 800019e:	685b      	ldr	r3, [r3, #4]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f9      	beq.n	800019c <config+0x2c>
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80001a8:	4b1c      	ldr	r3, [pc, #112]	; (800021c <config+0xac>)
 80001aa:	4a1c      	ldr	r2, [pc, #112]	; (800021c <config+0xac>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	6053      	str	r3, [r2, #4]
	RCC->CFGR|= RCC_CFGR_PPRE2_DIV1;
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <config+0xac>)
 80001b2:	4a1a      	ldr	r2, [pc, #104]	; (800021c <config+0xac>)
 80001b4:	685b      	ldr	r3, [r3, #4]
 80001b6:	6053      	str	r3, [r2, #4]

	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80001b8:	4b18      	ldr	r3, [pc, #96]	; (800021c <config+0xac>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a17      	ldr	r2, [pc, #92]	; (800021c <config+0xac>)
 80001be:	f043 0310 	orr.w	r3, r3, #16
 80001c2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <config+0xac>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a14      	ldr	r2, [pc, #80]	; (800021c <config+0xac>)
 80001ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001ce:	6193      	str	r3, [r2, #24]

	GPIOC->CRH &=~ GPIO_CRH_CNF13;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <config+0xb0>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	4a12      	ldr	r2, [pc, #72]	; (8000220 <config+0xb0>)
 80001d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001da:	6053      	str	r3, [r2, #4]

	GPIOC->CRH |= GPIO_CRH_MODE13;
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <config+0xb0>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	4a0f      	ldr	r2, [pc, #60]	; (8000220 <config+0xb0>)
 80001e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80001e6:	6053      	str	r3, [r2, #4]

	TIM1->ARR =0xffff-1;
 80001e8:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <config+0xb4>)
 80001ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80001ee:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->PSC =8-1;
 80001f0:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <config+0xb4>)
 80001f2:	2207      	movs	r2, #7
 80001f4:	629a      	str	r2, [r3, #40]	; 0x28





	TIM1->CR1 |=TIM_CR1_CEN;
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <config+0xb4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <config+0xb4>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6013      	str	r3, [r2, #0]

	while(! (TIM1->SR & TIM_SR_UIF ));
 8000202:	bf00      	nop
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <config+0xb4>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	f003 0301 	and.w	r3, r3, #1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f9      	beq.n	8000204 <config+0x94>



}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000
 8000220:	40011000 	.word	0x40011000
 8000224:	40012c00 	.word	0x40012c00

08000228 <delay_us>:
void delay_us(uint16_t us ){
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	80fb      	strh	r3, [r7, #6]
	TIM1->CNT=0;
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <delay_us+0x28>)
 8000234:	2200      	movs	r2, #0
 8000236:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM1->CNT <us);
 8000238:	bf00      	nop
 800023a:	4b05      	ldr	r3, [pc, #20]	; (8000250 <delay_us+0x28>)
 800023c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	429a      	cmp	r2, r3
 8000242:	d3fa      	bcc.n	800023a <delay_us+0x12>

}
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	40012c00 	.word	0x40012c00

08000254 <delay_ms>:
void delay_ms(uint16_t ms){
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	80fb      	strh	r3, [r7, #6]

	for (uint16_t i=0; i<ms ;i++){
 800025e:	2300      	movs	r3, #0
 8000260:	81fb      	strh	r3, [r7, #14]
 8000262:	e006      	b.n	8000272 <delay_ms+0x1e>
		delay_us(1000);
 8000264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000268:	f7ff ffde 	bl	8000228 <delay_us>
	for (uint16_t i=0; i<ms ;i++){
 800026c:	89fb      	ldrh	r3, [r7, #14]
 800026e:	3301      	adds	r3, #1
 8000270:	81fb      	strh	r3, [r7, #14]
 8000272:	89fa      	ldrh	r2, [r7, #14]
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	429a      	cmp	r2, r3
 8000278:	d3f4      	bcc.n	8000264 <delay_ms+0x10>
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <main>:
void configuart(void);
void usart_sendchar(char c);
void usart_sendstring(char *string);
uint8_t usart_getchar();
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	config();
 8000288:	f7ff ff72 	bl	8000170 <config>
	configuart();
 800028c:	f000 f820 	bl	80002d0 <configuart>
    /* Loop forever */
	while(1){



			GPIOC->ODR &=~ GPIO_ODR_ODR13;
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0x44>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <main+0x44>)
 8000296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800029a:	60d3      	str	r3, [r2, #12]

			usart_sendchar('a');
 800029c:	2061      	movs	r0, #97	; 0x61
 800029e:	f000 f885 	bl	80003ac <usart_sendchar>
			delay_ms(1000);
 80002a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a6:	f7ff ffd5 	bl	8000254 <delay_ms>
			GPIOC->ODR |= GPIO_ODR_ODR13;
 80002aa:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <main+0x44>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <main+0x44>)
 80002b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002b4:	60d3      	str	r3, [r2, #12]

			usart_sendstring("\nle hoang tan");
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <main+0x48>)
 80002b8:	f000 f890 	bl	80003dc <usart_sendstring>
			delay_ms(1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c0:	f7ff ffc8 	bl	8000254 <delay_ms>
			GPIOC->ODR &=~ GPIO_ODR_ODR13;
 80002c4:	e7e4      	b.n	8000290 <main+0xc>
 80002c6:	bf00      	nop
 80002c8:	40011000 	.word	0x40011000
 80002cc:	080004bc 	.word	0x080004bc

080002d0 <configuart>:


		}
}

void configuart(void){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80002d4:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <configuart+0xd0>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a31      	ldr	r2, [pc, #196]	; (80003a0 <configuart+0xd0>)
 80002da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002de:	6193      	str	r3, [r2, #24]
	RCC-> APB2ENR |= RCC_APB2ENR_IOPAEN;
 80002e0:	4b2f      	ldr	r3, [pc, #188]	; (80003a0 <configuart+0xd0>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a2e      	ldr	r2, [pc, #184]	; (80003a0 <configuart+0xd0>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80002ec:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <configuart+0xd0>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a2b      	ldr	r2, [pc, #172]	; (80003a0 <configuart+0xd0>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6193      	str	r3, [r2, #24]

	GPIOA->CRH &=~ GPIO_CRH_CNF9;
 80002f8:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <configuart+0xd4>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a29      	ldr	r2, [pc, #164]	; (80003a4 <configuart+0xd4>)
 80002fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000302:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1;
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <configuart+0xd4>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <configuart+0xd4>)
 800030a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE9_0;
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <configuart+0xd4>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4a23      	ldr	r2, [pc, #140]	; (80003a4 <configuart+0xd4>)
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE9_1;
 800031c:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <configuart+0xd4>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	4a20      	ldr	r2, [pc, #128]	; (80003a4 <configuart+0xd4>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=~ GPIO_CRH_CNF10;
 8000328:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <configuart+0xd4>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a1d      	ldr	r2, [pc, #116]	; (80003a4 <configuart+0xd4>)
 800032e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000332:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_1;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <configuart+0xd4>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <configuart+0xd4>)
 800033a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800033e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE10_0;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <configuart+0xd4>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <configuart+0xd4>)
 8000346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE10_1;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <configuart+0xd4>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <configuart+0xd4>)
 8000352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000356:	6053      	str	r3, [r2, #4]



	USART1->CR1 |= USART_CR1_UE;
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <configuart+0xd8>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <configuart+0xd8>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000362:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &=~ USART_CR1_M;
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <configuart+0xd8>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <configuart+0xd8>)
 800036a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800036e:	60d3      	str	r3, [r2, #12]

	USART1->BRR |= (5<<0) | (208<<4);// baud 2400 , clock 8mhz
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <configuart+0xd8>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <configuart+0xd8>)
 8000376:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800037a:	f043 0305 	orr.w	r3, r3, #5
 800037e:	6093      	str	r3, [r2, #8]

	USART1->CR1 |= USART_CR1_RE;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <configuart+0xd8>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a08      	ldr	r2, [pc, #32]	; (80003a8 <configuart+0xd8>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_TE;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <configuart+0xd8>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <configuart+0xd8>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	60d3      	str	r3, [r2, #12]

}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010800 	.word	0x40010800
 80003a8:	40013800 	.word	0x40013800

080003ac <usart_sendchar>:

void usart_sendchar(char c){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]

	USART1->DR =c;
 80003b6:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <usart_sendchar+0x2c>)
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	6053      	str	r3, [r2, #4]
	while(!(USART1->SR & USART_SR_TC));
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <usart_sendchar+0x2c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <usart_sendchar+0x12>

}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40013800 	.word	0x40013800

080003dc <usart_sendstring>:
void usart_sendstring(char *string){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]


	while(*string){
 80003e4:	e006      	b.n	80003f4 <usart_sendstring+0x18>
		usart_sendchar(*string++);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	607a      	str	r2, [r7, #4]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ffdc 	bl	80003ac <usart_sendchar>
	while(*string){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d1f4      	bne.n	80003e6 <usart_sendstring+0xa>

	}

}
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	; (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	; (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	; (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 f811 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff ff23 	bl	8000284 <main>

0800043e <LoopForever>:

LoopForever:
    b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800044c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000450:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000454:	2000001c 	.word	0x2000001c

08000458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC1_2_IRQHandler>
	...

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	2600      	movs	r6, #0
 8000460:	4d0c      	ldr	r5, [pc, #48]	; (8000494 <__libc_init_array+0x38>)
 8000462:	4c0d      	ldr	r4, [pc, #52]	; (8000498 <__libc_init_array+0x3c>)
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	10a4      	asrs	r4, r4, #2
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	f000 f81a 	bl	80004a4 <_init>
 8000470:	2600      	movs	r6, #0
 8000472:	4d0a      	ldr	r5, [pc, #40]	; (800049c <__libc_init_array+0x40>)
 8000474:	4c0a      	ldr	r4, [pc, #40]	; (80004a0 <__libc_init_array+0x44>)
 8000476:	1b64      	subs	r4, r4, r5
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004cc 	.word	0x080004cc
 8000498:	080004cc 	.word	0x080004cc
 800049c:	080004cc 	.word	0x080004cc
 80004a0:	080004d0 	.word	0x080004d0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
